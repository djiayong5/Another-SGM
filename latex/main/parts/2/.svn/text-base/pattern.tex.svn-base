\section{Паттерн проектирования \emph{O-State}}
\label{pattern-o-state}
Наиболее известной реализацией объекта, изменяющего поведение в зависимости от состояния, является 
паттерн \emph{State}. Паттерн \emph{State} не может использоваться напрямую для реализации предложенной модели, так 
как он не предусматривает сложных структур, используемых в ней. Паттерн \emph{State} может быть применен
для реализации предложенной модели в том случае, если все состояния --- простые. В этом случае у 
системы всегда ровно одно активное состояние. Это существенно упрощает реализацию, но в то же 
время существенно сокращает возможности модели. 

В настоящей работе предлагается новый паттерн, являющийся, в некотором смысле, расширением паттерна 
\emph{State}, способным реализовывать конструкции, содержащие OR- и AND-состояния.

\subsection{Назначение}

Паттерн \emph{O-State} предназначен для создания объектов, поведение которых варьируется в зависимости от 
состояния и задано при помощи модели, описанной в разделе~\ref{model}.

\subsection{Применимость}

Паттерн \emph{O-State} может быть использован в следующих случаях:

\begin{itemize}
\item когда поведение объекта зависит от его состояния. При этом объект может находиться в 
нескольких состояниях одновременно, а правила переходов могут быть описаны с помощью модели, 
предложенной в разделе~\ref{model};
\item когда использование паттерна \emph{State} затруднено или невозможно из-за сложной структуры состояний.
\end{itemize}

\subsection{Структура}

Диаграмма классов, описывающая структуру паттерна, изображена на рис.~\ref{pattern_structure}.
\drawfigurex{htb}{angle=-90,width=155mm}{pic/pattern.eps}{Общая структура паттерна \emph{O-State}}{pattern_structure}

\subsection{Участники}
\begin{itemize}
\item \stClassName{Context} --- контекст. С ним работают клиенты, посылая на обработку события с помощью
  вызовов метода \stMethodName{processEvent}, и состояния, активирующие переход с помощью вызовов метода 
  \stMethodName{offerTransition};
\item \stClassName{Event} --- событие. Класс является предком для всех классов событий, которые могут произойти в системе;
\item \stClassName{AbstractState} --- абстрактное состояние. Абстрактный класс, являющийся предком для всех классов,
  задающих состояния объекта;
\item \stClassName{StateIdentifier} --- идентификатор состояния. Экземпляры этого класса идентифицируют состояния объекта; 
\item \stClassName{StateDiscriptor} --- описание состояния. Этот класс и его потомки задают описание положения 
  состояния относительно других состояний;
\item \stClassName{SimpleStateDiscriptor} --- описание простого состояния;
\item \stClassName{ORStateDiscriptor} --- описание OR-состояния;
\item \stClassName{ANDStateDiscriptor} --- описание AND-состояния;
\item \stClassName{StateFactory} --- фабрика состояний. Этот класс отвечает за построение новых состояний по их 
  идентификаторам (используется паттерн \emph{Factory}~\cite{GAMMA});
\item \stClassName{Transition} --- Переход. Инициируется состоянием во время обработки события, обрабатывается
  контекстом;
\item \stClassName{StatesTree}, \stClassName{StateNode} --- служебные классы, необходимые для построения дерева 
  активных состояний.
\end{itemize}

\subsection{Отношения}
\begin{itemize}
\item класс \stClassName{Context} делегирует активным состояниям события, полученные от клиентов, вызывающих метод 
  \stMethodName{processEvent}. При этом класс \stClassName{Context} действует в соответствии с алгоритмом обработки 
  события, описанным в разделе~\ref{event_processing};
\item если состояние в процессе обработки события должно измениться, оно вызывает метод 
  \stMethodName{offerTransition} у объекта класса \stClassName{Context};
\item при смене состояния, объект класса \stClassName{Context} использует экземпляр класса \stClassName{StateFactory} 
  для построения новых состояний;
\item класс \stClassName{StateFactory} строит объекты \stClassName{AbstractState} по их идентификаторам
  \stClassName{StateIdentifier}.
\end{itemize}

\subsection{Результаты}
\begin{itemize}
\item предложенный паттерн обладает всеми достоинствами паттерна \emph{State} (разделенное по классам 
  поведение, легкость масштабирования, явное выделение состояний и переходов);
\item паттерн обеспечивает возможность реализации систем со сложным поведением, которые содержат OR- и AND-состояния.
  Проектирование таких систем без этого паттерна сложно. Это связано с тем, что, например, при выполнении одного перехода
  могут быть активированы и дезактивированы сразу несколько состояний, для которых необходимо выполнить действия при
  входе или при выходе. Таким образом, выполнение перехода в этих случаях представляет собой достаточно сложный процесс. 
  Описание этого процесса обеспечивается разработанной семантикой, а использование предложенного паттерна при
  проектировании позволяет в дальнейшем реализовать этот процесс корректно.
\end{itemize}

\subsection{Реализация}
\label{pattern-realization}
Для корректной реализации следует учесть некоторые особенности данного паттерна:
\begin{itemize}
\item необходимо, чтобы построенная система четко следовала алгоритму обработки события, предложенному в 
  разделе~\ref{event_processing}. Это осложнено тем, что реализация этого алгоритма в объекте класса \stClassName{Context} 
  не монолитна, так как в процессе он должен периодически отдавать управление активным состояниям;
\item правильное построение дерева состояний, позволяющее эффективно реализовать алгоритм выполнения перехода, 
  также может представлять некоторые сложности;
\item объект класса \stClassName{StateFactory} должен уметь создавать объекты всех существующих классов, задающих состояния. 
  Таким образом, он должен знать обо всех существующих состояниях. Это несколько затрудняет масштабирование 
  системы. При реализации паттерна на языке \emph{Java}, содержащем механизм \emph{Reflection}, можно вместо 
  класса \stClassName{StateIdentifier} использовать класс \stClassName{java.lang.Class}. В этом случае процесс построения 
  объекта состояния можно несколько унифицировать, устранив необходимость для класса \stClassName{StateFactory} иметь 
  информацию обо всех состояниях, в которых может находиться система.
\end{itemize}

Эти особенности учтены при реализации библиотеки, описанной в следующем разделе.